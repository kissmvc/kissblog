-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.7.11 - MySQL Community Server (GPL)
-- Server OS:                    Win32
-- HeidiSQL Version:             9.4.0.5144
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Dumping database structure for project_db
CREATE DATABASE IF NOT EXISTS `project_db` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `project_db`;

-- Dumping structure for table project_db.category
CREATE TABLE IF NOT EXISTS `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) COLLATE utf8_slovak_ci NOT NULL,
  `enabled` bit(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_slovak_ci;

-- Dumping data for table project_db.category: ~3 rows (approximately)
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` (`id`, `name`, `enabled`) VALUES
	(1, 'KISS Framework', b'1'),
	(2, 'PHP', b'1'),
	(3, 'jQuery', b'1');
/*!40000 ALTER TABLE `category` ENABLE KEYS */;

-- Dumping structure for table project_db.comments
CREATE TABLE IF NOT EXISTS `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `news_id` int(11) NOT NULL,
  `name` varchar(50) COLLATE utf8_slovak_ci NOT NULL,
  `comment` text COLLATE utf8_slovak_ci NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_slovak_ci;

-- Dumping data for table project_db.comments: ~0 rows (approximately)
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` (`id`, `news_id`, `name`, `comment`, `status`) VALUES
	(1, 2, 'Anton', 'Toto je super článok!', 1),
	(2, 2, 'Anthonius', 'Áno, je to úplne super.', 1),
	(3, 1, 'Jozef', 'Tak toto je absolútna bomba!', 1),
	(4, 1, 'Ferdinand', 'Tak hej, pracuje to skoro samé :)', 1),
	(5, 1, 'Anka', 'Ale ešte treba dorobiť čuo tuo :)', 1),
	(6, 1, 'Hanka', 'Aj kotva ide?', 1);
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;

-- Dumping structure for table project_db.news
CREATE TABLE IF NOT EXISTS `news` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) NOT NULL DEFAULT '0',
  `title` varchar(255) NOT NULL DEFAULT '',
  `text` text NOT NULL,
  `email` varchar(128) DEFAULT '',
  `image` varchar(255) DEFAULT '',
  `date_add` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- Dumping data for table project_db.news: ~2 rows (approximately)
/*!40000 ALTER TABLE `news` DISABLE KEYS */;
INSERT INTO `news` (`id`, `category_id`, `title`, `text`, `email`, `image`, `date_add`) VALUES
	(1, 1, 'Úvod do KISS frameworku', '<p>KISS Framework - Very simple semi MVC framework with fast learning curve created with Keep It Simple Stupid principle.</p>\r\n\r\n<h2>About</h2>\r\n\r\n<p>KISS framework is a simple, easy to use framework created with students for students, to speedup learning, simplify programming in PHP and encapsulate complexity of standard MVC for beginners. It is created with&nbsp;<em>Keep It Simple Stupid</em>&nbsp;principle in mind, so this is why KISS and Semi MVC (models is not required, but could be used).</p>\r\n\r\n<h2>How it&#39;s works</h2>\r\n\r\n<p>KISS is semi MVC framework, where are controllers and models joined into one object for simplicity. So this controller is dedicated to prepare data for presenter (view) and then this data is rendered by presenter (view/theme). All application logic is based on two thing - page and action. Page define controller, which sits inside app folder with same name as page. Action defines function that will be used to prepare and fill data for presenter.</p>\r\n\r\n<p>Example:&nbsp;<em>index.php?page=news&amp;action=addnew</em>&nbsp;... this URL mean you will load &quot;news&quot; controller and call &quot;addnew&quot; function. In detail, application will load news.php (controller) from &quot;app&quot; folder. This news.php file contains class named &quot;NewsPage&quot; with function &quot;addnew&quot;. Here you can do queries do database, any other things and save it to&nbsp;<em>$page-&gt;data-&gt;xxx</em>&nbsp;container. This&nbsp;<em>$page-&gt;data-&gt;xxx</em>&nbsp;container is then used inside template to render data to user. (It&#39;s eg. like&nbsp;<em>$data[&#39;xxx&#39;]</em>&nbsp;in Laravel).</p>\r\n\r\n<p>If you not define page, then &quot;index&quot; page (controller) is used. If you not define action, then the &quot;show&quot; action (function) is used. For SEO url, there is modified AltoRouter with default&nbsp;<em>&quot;/controller/action&quot;</em>&nbsp;route.</p>\r\n\r\n<h2>How to use</h2>\r\n\r\n<p>KISS is ready to use PHP application framework, so you can copy source to your app directory and you are ready to build your application. What you need:</p>\r\n\r\n<ul>\r\n	<li>edit config.php to setup database connection</li>\r\n	<li>create &quot;page&quot; (controller) file inside app folder, default index.php</li>\r\n	<li>create functions for all required actions inside controller class, do queries by powerful database class, fill $page-&gt;data-&gt;xxx container.</li>\r\n	<li>create theme file inside &quot;theme&quot; folder with same name as &quot;page&quot;, so create index.php for default view, news.php for news &quot;page&quot; etc. Render (echo) data from $page-&gt;data-&gt;xxx container inside your template.</li>\r\n</ul>\r\n\r\n<p>There is default Start Bootstrap starter template. You can change template inside controller eg: $page-&gt;tpl = &#39;news-edit&#39; for use &quot;news-edit.php&quot; template.</p>\r\n\r\n<h2>Default structure</h2>\r\n\r\n<ul>\r\n	<li><em>app folder</em>&nbsp;- contains controller files with controller class named by filename+Page, e.g. class IndexPage {} for index.php controller file</li>\r\n	<li><em>system folder</em>&nbsp;- contains KISS framework files</li>\r\n	<li><em>theme folder</em>&nbsp;- contains theme files, simple template engine used where variables is displayed by echo</li>\r\n	<li><em>config.php</em>&nbsp;- in root folder, contains base definitions</li>\r\n	<li><em>index.php</em>&nbsp;- in root folder - app loader</li>\r\n</ul>\r\n\r\n<h2>Classes</h2>\r\n\r\n<p>There is so much and so powerfull classes inside KISS framework, more documentation soon.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<p><strong>Retrieve data from GET, POST, FILES</strong></p>\r\n\r\n<pre>\r\n$title = $page-&gt;from-&gt;get(&#39;title&#39;)-&gt;val();\r\n\r\n//or escaped\r\n$title = $page-&gt;from-&gt;get(&#39;title&#39;)-&gt;escaped();\r\n\r\n//or directly from GET\r\n$title = $page-&gt;from-&gt;request-&gt;get[&#39;title&#39;];\r\n\r\n//or format as datetime\r\n$date = $page-&gt;from-&gt;post(&#39;date&#39;)-&gt;as_datetime();\r\n\r\n//look inside input.php for more</pre>\r\n\r\n<p><strong>Query database and fill data container</strong></p>\r\n\r\n<pre>\r\n$sql = &#39;SELECT * FROM news_table LIMIT 10&#39;;\r\n$page-&gt;data-&gt;news = $page-&gt;db-&gt;query($sql);</pre>\r\n\r\n<p><strong>Easier select and fill data container</strong></p>\r\n\r\n<pre>\r\n$page-&gt;data-&gt;news = $page-&gt;db-&gt;select(&#39;news_table&#39;, 5); //means SELECT * FROM news_table WHERE id = 5 - db class automaticaly use field with primary key eg: id</pre>\r\n\r\n<p><strong>Insert data</strong></p>\r\n\r\n<pre>\r\n$sql = &quot;INSERT INTO news_table (title, content) VALUES (&#39;KISS Framework&#39;, &#39;This is content of this news&#39;)&quot;;\r\n$page-&gt;db-&gt;query($sql);\r\n\r\n//or\r\n$last_id = $page-&gt;db-&gt;query($sql);\r\n\r\n//or without using SQL code\r\n$values = array(&#39;title&#39; =&gt; &#39;KISS framework&#39;, &#39;content&#39; =&gt; &#39;This is content of this news.&#39;);\r\n$page-&gt;db-&gt;insert(&#39;news_table&#39;, $values);\r\n\r\n//or populate array from POST/GET\r\n$values = array (\r\n    &#39;title&#39; =&gt; , $page-&gt;from-&gt;post(&#39;title&#39;)-&gt;val(),\r\n    &#39;content&#39; =&gt; , $page-&gt;from-&gt;post(&#39;text&#39;)-&gt;val()\r\n)\r\n$page-&gt;db-&gt;insert(&#39;news_table&#39;, $values);</pre>\r\n\r\n<p><strong>Need escape?</strong></p>\r\n\r\n<pre>\r\n//use \r\n$page-&gt;from-&gt;...-&gt;escaped()\r\n\r\n//or\r\n$title = $page-&gt;db-&gt;escape($page-&gt;from-&gt;post(&#39;title&#39;)-&gt;val());\r\n\r\n//or\r\n$title = $page-&gt;db-&gt;escape($_GET[&#39;title&#39;]);</pre>\r\n\r\n<p><strong>Update data</strong></p>\r\n\r\n<pre>\r\n$sql = &quot;UPDATE news_table SET title=&#39;KISS Framework&#39;, content=&#39;This is content of this news&#39; WHERE id = 5&quot;;\r\n$page-&gt;db-&gt;query($sql);\r\n\r\n//or without using SQL code\r\n$values = array(&#39;title&#39; =&gt; &#39;KISS framework&#39;, &#39;content&#39; =&gt; &#39;This is content of this news.&#39;);\r\n$page-&gt;db-&gt;update(&#39;news_table&#39;, $values, 5);</pre>\r\n\r\n<p><strong>Delete data</strong></p>\r\n\r\n<pre>\r\n$sql = &quot;DELETE FROM news_table WHERE id = 5&quot;;\r\n$page-&gt;db-&gt;query($sql);\r\n\r\n//or without using SQL code\r\n$page-&gt;db-&gt;delete(&#39;news_table&#39;, 5);</pre>\r\n\r\n<p><strong>Using rows from query</strong></p>\r\n\r\n<pre>\r\n$sql = &#39;SELECT * FROM news_table LIMIT 10&#39;;\r\n$page-&gt;data-&gt;news = $page-&gt;db-&gt;query($sql);\r\n\r\nforeach ($page-&gt;data-&gt;news as $article) {\r\n  echo $article-&gt;title;\r\n}\r\n\r\n//or any row directly by index\r\necho $page-&gt;data-&gt;news-&gt;rows[2]-&gt;title;\r\n\r\n//same as\r\necho $page-&gt;data-&gt;news[2]-&gt;title;\r\n\r\n//or first row\r\necho $page-&gt;data-&gt;news-&gt;row-&gt;title;</pre>\r\n\r\n<p><strong>Resize image</strong></p>\r\n\r\n<pre>\r\n$image = new Image(&#39;public/image/photo.jpg&#39;);\r\n$image-&gt;setBackground(&#39;#000000&#39;, 64)-&gt;resize(300, 300, Image::FULL)-&gt;save(&#39;public/cache/photo_300x300.png&#39;);\r\n\r\n//or use sharpen effect before save\r\n$image-&gt;setBackground(&#39;#000000&#39;, 64)-&gt;resize(300, 300, Image::FULL)-&gt;sharpen()-&gt;save(&#39;public/cache/photo_300x300.png&#39;);\r\n\r\n//or make it brigher\r\n$image-&gt;setBackground(&#39;#000000&#39;, 64)-&gt;resize(300, 300, Image::FULL)-&gt;brightness(10)-&gt;save(&#39;public/cache/photo_300x300.png&#39;);</pre>\r\n\r\n<p><strong>Send email</strong></p>\r\n\r\n<pre>\r\n$mail = new Mail();\r\n\r\n$mail-&gt;addFrom(&#39;tester@example.com&#39;)\r\n-&gt;addAttachment(&#39;public/Test_1.zip&#39;)\r\n-&gt;addTo(&#39;tester2@example.com&#39;)\r\n-&gt;addTo(&#39;someone@somewhere.com&#39;)\r\n-&gt;addSubject(&#39;Hello form KISS MVC&#39;)\r\n-&gt;setPriority(Mail::EMAIL_HIGH)\r\n-&gt;addBody(&#39;&lt;div&gt;Hello from KISS MVC Framework! Images is attached automaticaly&lt;br&gt;&lt;p&gt;&lt;img src=&quot;public/cache/photo_300x300.jpg&quot;&gt;&lt;/p&gt;&lt;/div&gt;&#39;)\r\n-&gt;send();\r\n//or save as eml for testing without sending spam\r\n-&gt;save(&#39;public/email.eml&#39;);</pre>\r\n\r\n<p><strong>Work with filesystem</strong></p>\r\n\r\n<pre>\r\n$fs = new FileSystem();\r\necho $fs-&gt;fromFile(&#39;public/test/photo.jpg&#39;)-&gt;humanSize();\r\n$fs-&gt;createDir(&#39;public/test/&#39;)-&gt;moveTo(&#39;public/images/&#39;);\r\n$fs-&gt;fromPath(&#39;public/images/photo.jpg&#39;)-&gt;copyTo(&#39;public/images/photo_2.jpg&#39;);\r\n$fs-&gt;getDirecory()-&gt;getFullTree() //use latest directory, so &#39;public/images/&#39; and return multidimensional array with SplFile</pre>\r\n\r\n<p><strong>Session handling</strong></p>\r\n\r\n<pre>\r\n$loged = $page-&gt;session-&gt;get(&#39;loged&#39;);\r\n//or array style\r\n$loged = $page-&gt;session[&#39;loged&#39;];\r\n//or object style\r\n$loged = $page-&gt;session-&gt;loged;\r\n//same for set\r\n$page-&gt;session-set(&#39;loged&#39;, true);\r\n//or\r\n$page-&gt;session[&#39;loged&#39;] = true;\r\n//or\r\n$page-&gt;session-&gt;loged = true;</pre>\r\n\r\n<p><strong>Need default value if key from GET, POST, Files, SESSION is not set?</strong></p>\r\n\r\n<pre>\r\n$title = $page-&gt;from-&gt;get(&#39;title&#39;, &#39;my default title&#39;)-&gt;val();\r\n//need to convert checkbox input value to true/false?\r\n$enabled = $page-&gt;from-&gt;get(&#39;enabled&#39;, false)-&gt;as_bool();\r\n//or\r\n$enabled = (bool)$page-&gt;from-&gt;get(&#39;enabled&#39;, false)-&gt;val();</pre>\r\n\r\n<p><strong>Validation available</strong></p>\r\n\r\n<pre>\r\n$validator = new Validator();\r\n//validate email\r\nif ($validator-&gt;validate(&#39;email&#39;, &#39;someone@somewhere.com&#39;)) {\r\n    echo &#39;Valid email address&#39;;\r\n}\r\n//available validators\r\n//boolean, bool, number, int, float, numeric, string, null, email, url, ip, date, datetime</pre>\r\n\r\n<p><strong>And The Real Magic - QueryHelper</strong></p>\r\n\r\n<p>We have eg: contact form with inputs, we want save messages to database table. Our inputs is named &quot;name&quot;, &quot;email&quot;, &quot;message&quot;. We use POST method.</p>\r\n\r\n<pre>\r\n$query = new QueryHelper($page);\r\n\r\n$query-&gt;into(&#39;contacts_table&#39;)\r\n-&gt;fromPost() /* fill fields by values from POST, or -&gt;fromGet() to use GET */\r\n-&gt;addField(&#39;name&#39;, &#39;name&#39;) /* first parameter - table field, second parameter key from POST */\r\n-&gt;addField(&#39;email&#39;, &#39;email&#39;)\r\n-&gt;addField(&#39;msg&#39;, &#39;message&#39;)\r\n-&gt;insert();\r\n//or\r\n-&gt;update($your_id);\r\n\r\n//if input names is same as field names, omit second parameter\r\n$query-&gt;into(&#39;contacts_table&#39;)\r\n-&gt;fromPost() /* fill fields by values from POST */\r\n-&gt;addField(&#39;name&#39;)\r\n-&gt;addField(&#39;email&#39;)\r\n-&gt;addField(&#39;msg&#39;)\r\n-&gt;insert();\r\n\r\n//or in one line, elegant\r\n$query-&gt;into(&#39;contacts_table&#39;)-&gt;fromPost()-&gt;addField(&#39;name&#39;)-&gt;addField(&#39;email&#39;)-&gt;addField(&#39;msg&#39;)-&gt;insert();\r\n\r\n//if you need to add exact value also, combine addField with addValue as you need\r\n$query-&gt;into(&#39;contacts_table&#39;)\r\n-&gt;fromPost() /* fill fields by values from POST */\r\n-&gt;addField(&#39;name&#39;)\r\n-&gt;addField(&#39;email&#39;)\r\n-&gt;addField(&#39;msg&#39;)\r\n-&gt;addValue(&#39;enabled&#39;, true)\r\n-&gt;insert();\r\n\r\n//another style\r\n$query-&gt;into(&#39;contacts_table&#39;)\r\n-&gt;fromPost() /* fill fields by values from POST */\r\n-&gt;addField(&#39;name&#39;, $page-&gt;from-&gt;post(&#39;name&#39;)-&gt;val())\r\n-&gt;addField(&#39;email&#39;, $page-&gt;from-&gt;post(&#39;email&#39;)-&gt;val())\r\n-&gt;addField(&#39;msg&#39;, $page-&gt;from-&gt;post(&#39;message&#39;)-&gt;val())\r\n-&gt;insert();\r\n\r\n//validate before insert\r\n$query-&gt;into(&#39;contacts_table&#39;)\r\n-&gt;fromPost()\r\n-&gt;addField(&#39;name&#39;)\r\n-&gt;addField(&#39;email&#39;, null, null, &#39;email&#39;) //4. parameter - validator - email\r\n-&gt;addField(&#39;msg&#39;);\r\n\r\nif ($query-&gt;isValid()) {\r\n  $query-&gt;insert();\r\n} else {\r\n  var_dump($query-&gt;validations());\r\n}</pre>\r\n\r\n<h2>And it&#39;s not all</h2>\r\n\r\n<p>More samples, documentation and website soon.</p>\r\n', '', 'zenit_2017_1.jpg', '2016-12-20 20:23:50'),
	(2, 2, 'Základy PHP', '<p>Ak ste už &uacute;spe&scaron;ne nain&scaron;talovali a otestovali server, je čas naučiť sa z&aacute;klady syntaxe a pr&aacute;cu s premenn&yacute;mi. Dnes si uk&aacute;žeme niektor&eacute; užitočn&eacute; veci, ktor&eacute; budeme potrebovať pri ďal&scaron;om učen&iacute;.</p>\r\n\r\n<h2>Opustenie HTML</h2>\r\n\r\n<p>Aby sme určili, ktor&yacute; k&oacute;d patr&iacute; PHP, ohranič&iacute;me ho &scaron;peci&aacute;lnymi tagmi, ktor&eacute; sa spracuj&uacute; už na serveri.</p>\r\n\r\n<pre>\r\n&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;?\r\n   echo &#39;krat&scaron;&iacute; sp&ocirc;sob&#39;;\r\n  ?&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n  &lt;?php\r\n   echo &#39;dlh&scaron;&iacute; sp&ocirc;sob&#39;;\r\n  ?&gt;\r\n &lt;/body&gt;\r\n&lt;/html&gt;</pre>\r\n\r\n<p>Použ&iacute;vajte rad&scaron;ej dlh&scaron;&iacute; sp&ocirc;sob, pretože krat&scaron;&iacute; sa d&aacute; vypn&uacute;ť v&nbsp;konfiguračnom s&uacute;bore&nbsp;php.ini. Taktiež m&ocirc;že sp&ocirc;sobiť chyby v XHTML dokumente.</p>\r\n\r\n<h2>Pozn&aacute;mky</h2>\r\n\r\n<p>Najprv sa nauč&iacute;me vkladať do PHP k&oacute;du pozn&aacute;mky - tie sa nevykon&aacute;vaj&uacute;, sl&uacute;žia iba pre program&aacute;tora. Existuj&uacute; až tri druhy pozn&aacute;mok.</p>\r\n\r\n<pre>\r\n&lt;?php\r\n // jednoriadkov&aacute; pozn&aacute;mka\r\n /* Pozn&aacute;mka, ktor&aacute; m&ocirc;že\r\n    zaberať viac riadkov */\r\n # ďal&scaron;&iacute; typ jednoriadkovej pozn&aacute;mky\r\n?&gt;</pre>\r\n\r\n<h2>Pr&iacute;kazy</h2>\r\n\r\n<p>Jazyk PHP je na rozdiel od jazykov ako HTML alebo CSS skriptovac&iacute;. Obsahuje teda pr&iacute;kazy, ktor&eacute; riadia beh - napr. podmienky, cykly, priradenia premenn&yacute;ch. Za každ&yacute;m pr&iacute;kazom nasleduje bodkočiarka.</p>\r\n\r\n<h2>Premenn&eacute;</h2>\r\n\r\n<p>S&uacute; to miesta v pam&auml;ti poč&iacute;tača, ku ktor&yacute;m pristupujeme pomocou ich n&aacute;zvu. Ten m&ocirc;že obsahovať p&iacute;smen&aacute; bez diakritiky, č&iacute;slice (nie na začiatku) a znak _. Pred n&aacute;zvom premennej v PHP sa nach&aacute;dza dol&aacute;r ($). Do premennej m&ocirc;žeme uložiť č&iacute;sla, texty, objekty,... Hodnotu premennej prirad&iacute;me znakom &bdquo;rovn&aacute; sa&ldquo;.</p>\r\n\r\n<pre>\r\n$cislo = 10;\r\n</pre>\r\n\r\n<p>Hodnotu textov&yacute;ch (reťazcov&yacute;ch) premenn&yacute;ch p&iacute;&scaron;eme vždy v &uacute;vodzovk&aacute;ch. Daj&uacute; sa použiť jednoduch&eacute; i dvojit&eacute; &uacute;vodzovky, rozdiely si vysvetl&iacute;me nesk&ocirc;r.</p>\r\n\r\n<pre>\r\n$retazec = &quot;Ahoj&quot;;\r\n$retazec = &#39;Ahoj&#39;;\r\n</pre>\r\n\r\n<h2>V&yacute;pis textu</h2>\r\n\r\n<p>Z&aacute;kladn&yacute; pr&iacute;kaz na v&yacute;pis textu je&nbsp;<code>echo</code>. Za n&iacute;m nasleduj&uacute; z&aacute;tvorky a text, ktor&yacute; chceme vyp&iacute;sať. Z&aacute;tvorky za pr&iacute;kazom&nbsp;<code>echo</code>&nbsp;nie s&uacute; povinn&eacute;.</p>\r\n\r\n<pre>\r\necho &quot;Hur&aacute;! &quot;;\r\necho(&quot;<strong>Funguje to.</strong>&quot;);\r\n</pre>\r\n\r\n<p>Tu je v&yacute;sledok skriptu:</p>\r\n\r\n<p>Hur&aacute;!&nbsp;<strong>Funguje to.</strong></p>\r\n\r\n<p>Vyp&iacute;sať m&ocirc;žeme aj hodnotu premennej.</p>\r\n\r\n<pre>\r\n$cena = &quot;takmer zadarmo&quot;;\r\necho $cena;</pre>\r\n', '', 'zenit_2017_muna_7b1f15.jpg', '2016-12-20 20:30:25');
/*!40000 ALTER TABLE `news` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
